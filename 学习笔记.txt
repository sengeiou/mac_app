沙盒机制：
点中项目根目录--->Capabilities，App Sandbox 开启或关闭


一、Xcode快捷键
1、格式化代码
选中代码，Control + I  
2、代码缩进
选中代码，
向左缩进 ：tab+shift 或 commond+[ 
向右缩进 ：tab 或 commond+] 
3、删除一行
在行末 按下commond+delete
4、带parameter的多行注释
把光标定位到需要添加注释文档的对象起始行，或上方的空白行。按下“command + Option + /”
5、查看方法调用者：
在当前class面板 选中方法，然后左上角选择 callers-> 查看调用者
6、为Xcode添加删除行、复制行快捷键
https://www.jianshu.com/p/cc6e13365b7e

Option +左键: 查看注释
command + L：快速跳到某一行
command + N：快速创建文件
command + shift + O: 快速打开某一个文件
option + command + [：上移一行
option + command + [：下移一行
control + command + 左/右箭头：返回至上一次光标位置 (进入到某函数内部，快速返回)
control + 6：快速查看当前class的方法
option+command+左右箭头：收起或展开方法块，需要先点中方法声明行
command + shift + J：快速定位到当前编辑文件的导航区域（左侧的文件目录，比如当前class文件在左边导航区域中的位置
control + N：光标下移一行
control + P：光标上移一行
command+1..8：快速切换左边导航区域，比如command+1 切换到class面板
command + shift + f :全局搜索



一、storyboard
1、window controller->view controller
可以随便拖动创建 window controller和view controller
点击按钮，链接到指定view controller。（按住control键,拖动按钮到指定view controller上，选择modal）

1、箭头表示初始化，启动app会打开箭头指向的controller(window controller和view controller都可以)
2、随着view controller的增多，查看view controller会比较麻烦，可以新建stoard 引用，这样可以在独立窗口打开
选中某个view controller ，在xcode菜单栏editor->refactor storyboard。
相当于把view controller分配不到不同storyboard，这样查看和编辑就比较容易了。
3、拖动一个storyboard reference 控件，可以选择链接到哪个storyboard上，然后链接到button打开
4、新建storyboard
File->new->File->storyboard
点中storyboard，右边attribute inspector 勾选 is initial controller 

三、Autolayout的使用
概述：控件的位置不随窗口缩放而改变
1、控件位置不随窗口大小变化
选中控件，size inspector通过Autoresizing控制上下左右
2、控件大小随窗口大小变化
选中控件，size inspector通过Autoresizing控制缩放

二十七、TableView
1、创建CellView.xlb
new file->view类型
设置class=RuleItemCellView
2、创建CellView.swift
new file->class类型
3、自定义view需要先注册
let ruleCellNib=NSNib(nibNamed:NSNib.Name(rawValue: "RuleItemCellView"), bundle: nil) //RuleItemCellView.xlb的名字
ruleTableView.register(ruleCellNib, forIdentifier: NSUserInterfaceItemIdentifier(rawValue: RuleCellKey))
4、右键tableview，outlets下的datasource、delegate
点中datasource，然后连接到当前ViewController上     
点钟delegate，然后连接到当前ViewController上
5、实现datasource和delegate
6、设置分割线
属性面板，horizontal grid 选择 solide或dash
7、处理点击item事件   

三十、Window
1、常用属性
backgroundColor

五十三、菜单
App的菜单：系统会提供一些默认的菜单项
控件的右键显示菜单：应用本身提供一些快捷的操作项目
控件的左键菜单： 一般用的比较少
Dock栏上的菜单：系统有默认的菜单项，应用可以添加额外的菜单项目

1、通过代码添加menu
2、在storyboard中添加menu

八十六、NSViewController
1、生命周期
viewDidLoad  --view被加载到内存中
viewWillAppear   --
viewDidAppear
    updateViewConstraint
    viewWillLayout
    viewDidLayout
viewWillDisappear
viewDidDisappear

通过xib方式创建ViewController
选中“Also create XIB file for user interfaces”
xib文件是用来描述controller的
在ViewController中加载其他ViewController
vc1=MyFirstViewController(nibName: "MyFirstViewController", bundle: nil) //加载指定的xib
vc1 = MyFirstViewController()//自动加载同名的xib

常用属性：
view：视图
storyboard:如果当前ViewController是由storyboard加载的，该属性有值


2、转场

3、presentController的四种方式
modal :以独立窗口的形式显示新的控制器界面
sheet：内嵌在当前window中的形式显示新的控制器界面
popover：
custom：自定义


九十、WindowController
用来管理Window
1、新建WindowController
继承WindowController，创建swift类，然后打开main.storyboard，将WindowController与新创建的类进行绑定
2、系统默认创建的WindowController，会自动绑定一个ViewController，如果想修改绑定其他的ViewController
在storyboard中点中window按钮，拖动到新的ViewController上，选择 window content
3、在代码中通过contentViewController 设置显示的ViewController
可以从storyboard中加载ViewController，但是可能会遇到问题，所以建议以xib方式加载ViewController，就是创建
ViewController类的时候，同时勾选“Also create XIB file for user interfaces”。
这样就可以直接创建ViewController对象
var viewController=MyViewController()
contentViewController=viewController
4、在ViewController中显示另外一个WindowC
以xib方式创建WindowController，并给该WindowController绑定一个View Controller
let windowController=NSWindowController(windowNibName: NSNib.Name("MyWindowController"))
windowController.showWindow(view) //在该ViewController中打开新的window



打包
1、设置最低版本
选择项目根目录----Geneal---Development Info ---设置支持的最低版本
2、沙盒
选择项目根目录----Capabilities----App Sandbox 关闭沙盒机制，可以读写电脑本地文件




